# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeocodingPlugin
                                 A QGIS plugin
 This plugin geocodes the addresses using TPL in-house geocoding API.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-28
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Shehar Bano
        email                : shehar.bano@tplmaps.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import requests
import time, threading
import gc
from base64 import b64encode
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
from qgis.core import QgsSymbolLayerRegistry, QgsSymbolLayer
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtCore import QVariant
from qgis.gui import QgsMessageBar
from qgis.gui import QgsMapToolEmitPoint
from qgis.utils import iface
from qgis import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from qgis.core import *
from qgis.gui import QgsMapCanvas
from qgis.gui import *
from qgis.PyQt import QtGui
from PyQt5 import QtGui
from PyQt5.QtCore import *
from qgis.core import QgsProject
from qgis.core import QgsVectorLayer, QgsPoint, QgsMapLayer
from qgis.core import QgsFeature, QgsMapLayerProxyModel
import processing
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox, QFileDialog
from qgis.core import QgsDistanceArea, QgsCoordinateReferenceSystem, QgsPoint, QgsApplication
from qgis.core import (
  QgsGeometry,
  QgsPoint,
  QgsPointXY,
  QgsWkbTypes,
  QgsProject,
  QgsFeatureRequest,
  QgsDistanceArea
)
from qgis.core import QgsDistanceArea, QgsCoordinateReferenceSystem, QgsPoint, QgsApplication, QgsVectorFileWriter, QgsLineSymbolLayer
from qgis.core import QgsProject
from PyQt5.QtCore import *
from qgis.core import QgsProject
from PyQt5.QtCore import *
import collections
import polyline
import os
import pandas as pd
from datetime import datetime, timedelta
from .dbConfiguration import DbConfig
from . import Configuration as conf
from .geocodingThread import Geocoding
from .thread2 import FetchResult
from .thread3 import Geocoding_Three
from .thread4 import Geocoding_Four
from .geocodingThread_params import Geocoding_CSV
import requests
# import csv
# from xlsxwriter import Workbook
import time
import random
import json
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .geocoding_plugin_dialog import GeocodingPluginDialog, DatabaseDialog
from .test_thread import threadtester
import os.path
import urllib

class GeocodingPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeocodingPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&TPL Geocoding Plugin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeocodingPlugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/geocoding_plugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'TPL Geocoding Plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&TPL Geocoding Plugin'),
                action)
            self.iface.removeToolBarIcon(action)

    def OpenBrowse(self):
        file = QFileDialog()
        file.setAcceptMode(1)
        fileType = self.dlg.outputType.currentText()
        dir_ = file.getSaveFileName(None, 'Save as file:', 'C:\\', filter=f"{fileType}({conf.fileextension[fileType]})")
        self.dlg.outputBrowse.setText(str(dir_[0]))

    def InputBrowse(self):
        file = QFileDialog()
        file.setAcceptMode(1)
        dir_ = file.getOpenFileName(None, 'Open file:', 'C:\\', filter=f"CSV(*.csv)")
        self.dlg.inputDirectory_label.setText(str(dir_[0]))
        self.csv = pd.read_csv(self.dlg.inputDirectory_label.text())
        self.populateColumns('csv')

    def outputchange(self):
        if self.dlg.outputType.currentText() == 'Update source file':
            self.dlg.outputBrowse.hide()
            self.dlg.outputDirectory.hide()
            self.dlg.label_18.hide()
        elif self.dlg.outputType.currentText() != 'Update source file':
            self.dlg.outputBrowse.show()
            self.dlg.outputDirectory.show()
            self.dlg.label_18.show()

    def filter_func(self):
        where = self.dlg.where.text()
        filter = ''
        try:
            if self.numerical:
                filter = ' where ' + conf.numerical
            if self.nullvals:
                if filter != '':
                    filter = filter + ' and ' + conf.nullvals
                else:
                    filter = ' where ' + conf.nullvals
            if self.length:
                if filter != '':
                    filter = filter + ' and ' + conf.lengthless
                else:
                    filter = ' where ' + conf.lengthless
        except:
            pass

        if where == '':
            self.filter =  ' where ' + filter
        if where != '':
            self.filter = ' where ' + where
        if where != '' and filter == '':
            self.filter =  ' where ' + where
        elif where != '' and filter != '':
            self.filter =  ' where ' +  filter + ' and ' + where
        elif filter != '' and where == '':
            self.filter =  ' where ' + filter

    def createAPI(self):
        self.clear_logs()
        conf.k = 0
        self.kjh = 0
        base = 'https://api1.tplmaps.com:8888/search?version=2&name={0}'
        table = self.dlg.tables.currentText()
        address = self.dlg.address.currentText()
        apikey = self.dlg.APIkey.text()
        Searchtype = self.dlg.searchtype.currentText()
        city = self.dlg.city.currentText()
        subcategory = self.dlg.subcategory.currentText()
        category = self.dlg.category.currentText()
        options = self.dlg.apiOptions.checkedItems()
        Offset = self.dlg.offset.text()
        Limit = self.dlg.limit.text()
        where = self.dlg.where.text()
        Polygon = self.dlg.polygon.text()
        Radius = self.dlg.radius.text()
        Point = self.dlg.point.text()
        filters = ''
        conf.db_columns['Address']= address
        conf.db_columns['City'] = city
        conf.db_columns['Subcategory'] = subcategory
        conf.db_columns['Category']= category
        payload = {}
        self.dlg.tabWidget.setCurrentIndex(2)
        for k,i in enumerate(options):
            filters = filters + f'&{i.lower()}=' + '{' + str(k+1) + '}'

        self.filters = filters + '&apikey={' + str(len(options)+1) + '}'

        print('API = ' + base + self.filters)
        if self.dlg.database.isChecked() == True:
            db_filter = address
            for key, value in conf.db_columns.items():
                if key in options:
                    db_filter = db_filter + ' , ' + value
            print(db_filter)
            self.logs_style()

            self.dlg.logs_1.setText(f'Time: {str(datetime.time(datetime.now()))} Starting Processing....')
            self.dlg.logs_2.setText('Fetching Records....')
            self.filter_func()
            if self.filter == ' where ':
                result = conf.get_address.format(db_filter , table)
            else:
                result = conf.get_address.format(db_filter, table  +  self.filter)
            self.fetch = FetchResult('fetch', result)
            self.fetch.rows.connect(self.result_returned)
            self.fetch.error.connect(self.connection_error)
            self.fetch.start()

            self.api = base + self.filters
            conf.count = len(result)
            conf.total = 0

        elif self.dlg.csv.isChecked() == True:
            csv = self.dlg.inputDirectory_label.text()
            self.dlg.logs_1.setText(f'Time: {str(datetime.time(datetime.now()))} Starting Processing....')
            self.dlg.logs_2.setText('Reading CSV....')
            df = pd.read_csv(csv)
            list_dic = {}
            list_dic['address'] = df['address'].tolist()
            for key, value in conf.db_columns.items():
                if key in options:
                    list_dic[value] = df[value].tolist()
            # print(list_dic)
            payload = {}
            self.tot = len(list_dic["address"])
            self.dlg.logs_3.setText(f'Time: {str(datetime.time(datetime.now()))} , {len(list_dic["address"])} Records Fetched....')
            self.dlg.logs_4.setText(f'Time: {str(datetime.time(datetime.now()))} Starting Geocoding....')
            for key_ad, i in enumerate(list_dic['address']):
                payload['version'] = 2
                payload['name'] = i
                for key, i in enumerate(conf.populate_columns):
                    if i.capitalize() in options:
                        print(key_ad)
                        payload[i] = list_dic[conf.db_columns[i.capitalize()]][key_ad]
                for key, i in enumerate(conf.other_options):
                    if i in options:
                        if i != 'Searchtype':
                            payload[i.lower()] = eval(f'self.dlg.{i.lower()}.text()')
                        else:
                            payload[i.lower()] = eval(f'self.dlg.{i.lower()}.currentText()')
                payload['apikey'] = apikey
                # print(payload)
                api = base + self.filters
                o = 0
                check_format_val = 'api.format('
                for key_r, values_r in payload.items():
                    if key_r != 'version' and key_r != 'apikey':
                        if o != 0:
                            check_format_val = check_format_val + ",'" + str(values_r) + "'"
                        else:
                            check_format_val = check_format_val + "'"+ str(values_r) + "'"
                        o = o + 1

                check_format_val = check_format_val + ', apikey)'
                resp = eval(check_format_val)
                # base_csv = 'https://api1.tplmaps.com:8888/search'
                # params = urllib.parse.urlencode(payload, quote_via=urllib.parse.quote)
                # val = requests.get(base_csv, params=params)
                # print(val.url)
                # print(val.json())
                conf.total = conf.total + 1
                geocode = True
                # if self.numerical:
                #     if not i.isdigit():
                #         geocode = False
                #
                # if self.length:
                #     if len(i) < 5:
                #         geocode = False
                # if geocode == True:
                self.geo = Geocoding_CSV('geocode', resp, i)
                self.geo.rows.connect(self.successful)
                self.geo.error.connect(self.connection_error)
                self.geo.start()
                # else:
                #     api_result = {'raw_address': i, 'Lat': None, 'Long': None,
                #                        'Geocoded Address': None,
                #                        'Precision': None, 'Subcategory': None,
                #                        'Category': None, 'Name': None, 'Priority': None,
                #                        'Remarks': 'Discarded: Is A Digit', 'Count':None}
                #     self.successful(api_result)

    def result_returned(self, result):
        # self.fetch.__del__()
        print(result)
        self.lengthresult = len(result)
        self.dlg.logs_3.setText(f'Time: {str(datetime.time(datetime.now()))} , {len(result)} Records Fetched....')
        self.dlg.logs_4.setText(f'Time: {str(datetime.time(datetime.now()))} Starting Geocoding....')
        apikey = self.dlg.APIkey.text()
        Searchtype = self.dlg.searchtype.currentText()
        options = self.dlg.apiOptions.checkedItems()
        Offset = self.dlg.offset.text()
        Limit = self.dlg.limit.text()
        Polygon = self.dlg.polygon.text()
        Radius = self.dlg.radius.text()
        Point = self.dlg.point.text()


        for index, row in enumerate(result):
            check_format_val = 'self.api.format('
            for j in range(len(row)):
                if j == 0:
                    check_format_val = check_format_val + 'str(row[' + f'{j}' + '])'
                else:
                    check_format_val = check_format_val + ', str(row[' + f'{j}' + '])'
            for key, i in enumerate(conf.other_options):
                if i in options:
                    check_format_val = check_format_val + f',{i}'

            check_format_val = check_format_val + ', apikey)'

            resp = eval(check_format_val)
            print('resp: ', resp)
            conf.total = conf.total + 1
            import threading, queue
            threadlist = []
            # que = queue.Queue()
            t = threadtester('geocode', resp, row[0])
            t.start()
            threadlist.append(t)
            for t in threadlist:
                value = t.join()
                self.successful(value)

        gc.collect()


    def stopthread(self):
        self.fetch.quit()
        self.geo.quit()
        self.dlg.logs_8.setText('Geocoding Stopped')

    def connection_error(self, fn_to_run):
        self.displayMsg(fn_to_run)

    def successful(self, api_result):
        # conf.total = conf.total + 1
        conf.k = conf.k + 1
        ouput_columns = self.dlg.OutputColumns.checkedItems()
        csv_f = self.dlg.inputDirectory_label.text()
        raw_address = api_result['raw_address']
        data_dict = {}
        conf.final_dict['raw_address'] = raw_address
        opt = ['raw_address']
        output = []
        json_data = {}
        # json_data['data'] = []
        for i in ouput_columns:
            if i == 'Lat, Long':
                values_to_return = '''api_result['Lat']'''
                values_to_return = values_to_return + ''', api_result['Long']'''
                conf.final_dict['Lat'] = api_result['Lat']
                conf.final_dict['Long'] = api_result['Long']
                opt.append('Lat')
                opt.append('Long')
                output.append('Lat float')
                output.append('Long float')
            else:
                values_to_return = values_to_return + f''', api_result['{i}']'''
                conf.final_dict[f'{i}'] = api_result[f'{i}']
                opt.append(i)
                output.append(f'{i} varchar')

        data = eval(values_to_return)
        self.dlg.logs_5.setText(f'{conf.total} Record(s) Processed')
        self.dlg.logs_6.setText(f'{api_result["Count"]} Record(s) Not Geocoded')
        output_dir = self.dlg.outputBrowse.text()
        output_type = self.dlg.outputType.currentText()
        address = self.dlg.address.currentText()
        if output_type != 'Update source file':
            if output_type == 'Text':
                with open(output_dir, 'w') as f:
                    f.write(f'input_address: {raw_address}, Geocoded Data: {data}\n')
            if output_type == 'CSV':
                data_dict[conf.k] = conf.final_dict
                df = pd.DataFrame(data_dict)
                df = df.transpose()
                df = df.reindex(columns=opt)
                if conf.k == 1:
                    df.to_csv(output_dir, mode='a', header=True)
                else:
                    df.to_csv(output_dir, mode='a', header=False)
            if output_type == 'JSON':
                json_data['data']= [conf.final_dict]
                # print(json_data)
                if conf.k == 1:
                    with open(output_dir, 'w') as f:
                        json.dump(json_data, f)
                else:
                    with open(output_dir) as f:
                        data = json.load(f)
                        temp = data['data']
                        temp.append(json_data['data'])
                    with open(output_dir, 'w') as f:
                        json.dump(data, f)
        else:
            # print(values_to_return)
            if self.dlg.database.isChecked() == True:
                table = self.dlg.tables.currentText()
                col = {}
                col['col'] = output
                values = ''
                for k , i in enumerate(col['col']):
                    # print(f"alter table {table} add column IF NOT EXISTS {i.replace('Geocoded Address', 'geocoded_address').lower()}")
                    self.db.DbModifyQuery(f"alter table {table} add column IF NOT EXISTS {i.replace('Geocoded Address', 'geocoded_address').lower()}")

                for k, i in enumerate(opt):
                    if i != 'raw_address':
                        if k == 1:
                            values = values + i.replace('Geocoded Address', 'geocoded_address').lower() + " = '" + f'{conf.final_dict[f"{i}"]}'+ "'"
                        else:
                            values = values + ' , ' + i.replace('Geocoded Address', 'geocoded_address').lower() + " = '" + f'{conf.final_dict[f"{i}"]}' + "'"
                # print(values)
                query = f"Update {table} set {values} where {address} = '{raw_address}';commit;"
                # print(query)
                self.db.DbModifyQuery(query)
                # print('Row processed')

            elif self.dlg.csv.isChecked() == True:
                df = pd.read_csv(csv_f)
                print(values_to_return)
                # print('csvpath', csv_f)
                # print('dict is', conf.final_dict)
                for keys, values in conf.final_dict.items():
                    if keys != 'raw_address':
                        print('keys are here', self.kjh, keys, values)
                        df.loc[self.kjh, keys] = values
                df.to_csv(csv_f, index=False)
                # print(df.head())
                self.kjh = self.kjh + 1
                del df

        if conf.total == self.lengthresult:
            self.dlg.logs_7.setText(f'Time: {str(datetime.time(datetime.now()))} Geocoding Done....')
        # self.geo.__del__()
        gc.collect()

    def logs_style(self):
        for i in range(14):
            logs = f'self.dlg.logs_{i+1}.setStyleSheet(conf.logs_stylesheet)'
            eval(logs)
        for i in range(21,27):
            logs = f'self.dlg.logs_{i}.setStyleSheet(conf.logs_stylesheet)'
            eval(logs)

    def changesource(self):
        if self.dlg.database.isChecked() == True:
            self.dlg.inputDirectory_label.hide()
            self.dlg.inputDirectory.hide()
            self.dlg.label_17.hide()
            self.dlg.connect2db.show()
            self.dlg.tables.show()
            self.dlg.label.show()
            self.dlg.where.show()
            self.dlg.label_where.show()
        elif self.dlg.csv.isChecked() == True:
            self.dlg.connect2db.hide()
            self.dlg.inputDirectory_label.show()
            self.dlg.inputDirectory.show()
            self.dlg.label_17.show()
            self.dlg.tables.hide()
            self.dlg.label.hide()
            self.dlg.where.hide()
            self.dlg.label_where.hide()

    def changecolumns(self):
        options = []
        if self.dlg.apiOptions.checkedItems():
            for i, k in enumerate(conf.api_options):
                if k in self.dlg.apiOptions.checkedItems():
                    widget = f'self.dlg.{k.lower()}.show()'
                    label = f'self.dlg.label_{k.lower()}.show()'
                    eval(widget.replace('''\'''',''))
                    eval(label.replace('''\'''', ''))
                if k not in self.dlg.apiOptions.checkedItems():
                    widget = f'self.dlg.{k.lower()}.hide()'
                    label = f'self.dlg.label_{k.lower()}.hide()'
                    eval(widget.replace('''\'''',''))
                    eval(label.replace('''\'''', ''))
            try:
                if 'Radius' in self.dlg.apiOptions.checkedItems():
                    self.dlg.apiOptions.setCheckedItems(['Point'])
            except Exception as e:
                print(str(e))
        else:
            for k in conf.api_options:
                widget = f'self.dlg.{k.lower()}.hide()'
                label = f'self.dlg.label_{k.lower()}.hide()'
                eval(widget.replace('''\'''', ''))
                eval(label.replace('''\'''', ''))

    def populateColumns(self, type):
        if type == 'DB':
            columns = [i[0] for i in self.db.DbResultsQuery(conf.get_field_names.format(self.dlg.tables.currentText()))]
        else:
            columns = [i for i in self.csv.columns]
        for i in conf.populate_columns:
            clear  = f'self.dlg.{i}.clear()'
            widget = f'self.dlg.{i}.addItems(columns)'
            eval(clear.replace('''\'''', ''))
            eval(widget.replace('''\'''', ''))
        self.dlg.preprocess.show()
        self.clear_logs()

    def populateTables(self):
        tables = self.db.DbResultsQuery(conf.get_table_names)
        self.dlg.tables.addItems([i[0] for i in tables])

    def displayMsg(self, Msg):
        msgBox = QMessageBox()
        msgBox.setText(str(Msg))
        msgBox.show()
        msgBox.exec_()

    def connect(self):
        ip = self.dlg1.ipLineEdit.text()
        port = self.dlg1.portLineEdit.text()
        db = self.dlg1.dbNameLineEdit.text()
        username = self.dlg1.userLineEdit.text()
        password = self.dlg1.passLineEdit.text()
        self.db = DbConfig(ip, db, port, username,password)
        self.conn = self.db.ConnectDb()
        if self.conn:
            self.displayMsg('Database connected')
            self.dlg1.hide()
            self.populateTables()
        else:
            self.displayMsg('Database not connected. Wrong Credentials')
        self.dlg.preprocess.show()

    def change_style(self):
        from . import stylesheet
        if self.dlg.theme.currentText() == 'Light':
            self.dlg.setStyleSheet(None)
            self.dlg1.setStyleSheet(None)
            # self.dlg.folderpath.setStyleSheet(stylesheet.stylesheet_label_white)

        elif self.dlg.theme.currentText() == 'Dark':
            self.dlg.setStyleSheet(stylesheet.stylesheet_black)
            self.dlg1.setStyleSheet(stylesheet.stylesheet_black)
            # self.dlg.folderpath.setStyleSheet(stylesheet.stylesheet_label_black)

    def process(self):

        if self.dlg.specialchars.isChecked() == True:
            self.specials = True
        if self.dlg.spaces.isChecked() == True:
            self.spaces = True
        if self.dlg.nullvals.isChecked() == True:
            self.nullvals = True
        if self.dlg.numericalvals.isChecked() == True:
            self.numerical = True
        if self.dlg.length.isChecked() == True:
            self.length = True
        self.preprocess()

    def remove_special_character(self, list_t):
        import re
        return [re.sub('[^A-Za-z0-9]+', ' ', x) for x in list_t]

    def clean_split_string(self, list_t):
        return [str(x).rstrip().lstrip() for x in list_t]

    def preprocess(self):
        if self.dlg.database.isChecked() == True:
            table = self.dlg.tables.currentText()
            address = self.dlg.address.currentText()
            self.db.DbModifyQuery(conf.process_main.format(table, address))
            self.dlg.logs_21.setText('Address Formatted Column Added')
            if self.specials:
                print(conf.specials.format(table))
                self.db.DbModifyQuery(conf.specials.format(table))
                self.dlg.logs_21.setText('Special Characters Removed')
            if self.spaces:
                self.db.DbModifyQuery(conf.extraspace.format(table))
                self.db.DbModifyQuery(conf.ltrim.format(table))
                self.db.DbModifyQuery(conf.rtrim.format(table))
                self.dlg.logs_22.setText('Removed Extra Spaces')

        elif self.dlg.csv.isChecked() == True:
            csv_d = self.dlg.inputDirectory_label.text()
            df = pd.read_csv(csv_d)
            address = df['address'].tolist()
            if self.spaces:
                address = self.clean_split_string(address)
                self.dlg.logs_21.setText('Special Characters Removed')
            if self.specials:
                address = self.remove_special_character(address)
                self.dlg.logs_22.setText('Removed Extra Spaces')
            df['address_formatted'] = address
            df.to_csv(csv_d, index=False)
            del df
        if self.numerical:
            self.dlg.logs_23.setText('Extracting numerical values')
        if self.length:
            self.dlg.logs_24.setText('Extracting length less than 5')
        self.displayMsg('Pre-Processing Done')
        self.dlg.tabWidget.setCurrentIndex(0)
        self.dlg.preprocess.hide()
        self.dlg.logs_25.setText('Address Formatted Column Added')
        self.dlg.logs_26.setText('Pre Processing Done')
        index = self.dlg.address.findText('address_formatted', QtCore.Qt.MatchFixedString)
        self.dlg.address.setCurrentIndex(index)

    def changetab(self):
        self.dlg.tabWidget.setCurrentIndex(1)

    def clear_logs(self):
        for i in range(14):
            logs = f'self.dlg.logs_{i+1}.clear()'
            eval(logs)
        for i in range(21,27):
            logs = f'self.dlg.logs_{i}.clear()'
            eval(logs)

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GeocodingPluginDialog()
            self.dlg1 = DatabaseDialog()
            self.dlg.database.setChecked(True)
            self.changesource()
            self.changecolumns()
            self.outputchange()
            self.change_style()
            self.dlg.preprocess.hide()
            self.specials = False
            self.spaces = False
            self.nullvals = False
            self.numerical = False
            self.length = False
            self.dlg.database.toggled.connect(self.changesource)
            self.dlg.csv.toggled.connect(self.changesource)
            self.dlg.apiOptions.checkedItemsChanged.connect(self.changecolumns)
            self.dlg.connect2db.clicked.connect(self.dlg1.show)
            self.dlg1.buttonBox.clicked.connect(self.connect)
            self.dlg.tables.currentIndexChanged.connect(lambda: self.populateColumns('DB'))
            self.dlg.geocoding.clicked.connect(self.createAPI)
            self.dlg.outputDirectory.clicked.connect(self.OpenBrowse)
            self.dlg.outputType.currentIndexChanged.connect(self.outputchange)
            self.dlg.inputDirectory.clicked.connect(self.InputBrowse)
            self.dlg.OutputColumns.selectAllOptions()
            self.dlg.theme.currentIndexChanged.connect(self.change_style)
            self.dlg.preprocess.clicked.connect(self.changetab)
            self.dlg.startprocessing.clicked.connect(self.process)
            self.dlg.tables.currentIndexChanged.connect(self.clear_logs)
            self.dlg.inputDirectory_label.textChanged.connect(self.clear_logs)
            self.dlg.stop.clicked.connect(self.stopthread)
            self.clear_logs()
            # self.dlg.adjustSize()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

